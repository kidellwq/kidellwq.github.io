<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kidell的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.kzimo.com/"/>
  <updated>2018-06-21T02:35:39.543Z</updated>
  <id>http://blog.kzimo.com/</id>
  
  <author>
    <name>kidell</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>厦门印象</title>
    <link href="http://blog.kzimo.com/2018/06/21/cjinxz20m0006ksv2tntjncc3/"/>
    <id>http://blog.kzimo.com/2018/06/21/cjinxz20m0006ksv2tntjncc3/</id>
    <published>2018-06-21T01:21:00.000Z</published>
    <updated>2018-06-21T02:35:39.543Z</updated>
    
    <content type="html"><![CDATA[<img src="http://p9h7y3nmi.bkt.clouddn.com/images//xm.jpg"><blockquote><p>人生最好的遇见，莫过于心灵的重逢，惊鸿一瞥，便足以心仪。</p></blockquote><a id="more"></a><p>今年，公司组织去厦门旅游，其实，对于厦门，并没有什么特别的印象，只知道上边有个鼓浪屿，还有被称为最美大学的厦门大学。</p><p>因为公司联系的旅游团，所以基本上就没有准备，也没有查攻略，稀里糊涂的就跟着上了飞机，作为一个从来没有做过飞机的人来说，第一次坐飞机给我的印象并没有想象中激动，也有可能是因为晚班飞机，窗外乌漆麻黑的看不到什么风景，整个飞行感受还不如坐高铁来的要好。</p><p>飞机停靠在厦门机场时已经晚上11点了，走出航站楼天空已经黑了，直接坐上大巴就去了住宿的地方，因为之前听导游小哥说了居所是当地的民宿，顿时心情Down到底，不过转念一想倒也理解，公司的集体旅游嘛，费用没那么高，酒店什么的就不要想了。</p><p>到达民宿后，其实倒没有我想象中的条件那么差，至少房间还算宽敞，也挺干净，透过窗外还能看到提着行李箱入住或者离去的游客，右侧是两个芒果树，对于我这种土生土长的北方人，芒果树算是稀奇的了</p><img src="http://p9h7y3nmi.bkt.clouddn.com/images/mangguo.jpg"><h5 id="环岛路"><a href="#环岛路" class="headerlink" title="环岛路"></a>环岛路</h5><p>据介绍，环岛路全长43公里，不负“最美公路”的称号，从车上路过就可以领略它的美，置身其中，心跟随眼睛同时发生着变化，沿着公路一眼望不到头的亚热带风光植物，让人一时有些恍惚，无法适应又令人兴奋。后来的整个行程中的几天，每天都会有几次乘车行驶在这条路上，而每次都会有种美的不真实感。</p><p>厦门自2003年开始，连续每年举办国际马拉松大赛，赛道就设在环岛路上，所以厦门的环岛路又被称为世界上最美的马拉松赛道。每当坐车路过，看着路上那些不分任何时间都能看到的跑步者的身影，以及绿化带上相隔不远就能看到的一座座体育题材的雕像时，总想哪天骑个小黄车，沿着环岛路慢慢的骑行一圈，可惜这个心愿一直到离开都没有实现</p><img src="http://p9h7y3nmi.bkt.clouddn.com/images/huandao1.jpg"><img src="http://p9h7y3nmi.bkt.clouddn.com/images/huandao2.jpg"><img src="http://p9h7y3nmi.bkt.clouddn.com/images/huandao3.jpg"><h5 id="沙滩"><a href="#沙滩" class="headerlink" title="沙滩"></a>沙滩</h5>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://p9h7y3nmi.bkt.clouddn.com/images//xm.jpg&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;人生最好的遇见，莫过于心灵的重逢，惊鸿一瞥，便足以心仪。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="游记" scheme="http://blog.kzimo.com/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="厦门" scheme="http://blog.kzimo.com/tags/%E5%8E%A6%E9%97%A8/"/>
    
      <category term="旅游" scheme="http://blog.kzimo.com/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Linux下Mysql的安装</title>
    <link href="http://blog.kzimo.com/2018/06/04/cjinxz20c0000ksv2yx7oue4j/"/>
    <id>http://blog.kzimo.com/2018/06/04/cjinxz20c0000ksv2yx7oue4j/</id>
    <published>2018-06-04T05:03:00.000Z</published>
    <updated>2018-06-21T01:19:03.263Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ubuntu-18-04下安装Mysql"><a href="#Ubuntu-18-04下安装Mysql" class="headerlink" title="Ubuntu 18.04下安装Mysql"></a>Ubuntu 18.04下安装Mysql</h3><ol><li><p>Mysql8.0的安装</p><a id="more"></a><p>在ubuntu 18.04下，如果采用<code>sudo apt install mysq-server</code>安装的话，安装的是mysql 5.7的版本，在安装过程中没有提示设置root密码，各种问题，虽然可以解决，但是较为麻烦。</p><p>在mysql的官网上，发现mysql5.7最高只适配到ubuntu17.04，而mysql8.0则适配到了ubuntu18.04</p><p>安装mysql8.0就没什么难的路，直接</p><pre><code>wget https://dev.mysql.com/get/mysql-apt-config_0.8.10-1_all.deb</code></pre><p> 把文件下载下来之后</p><pre><code>sudo dpkg -i mysql-apt-config_0.8.10-1_all.deb</code></pre><p>会弹出一个界面，选择8.0还是5.7，选择之后，直接OK</p><pre><code>sudo apt updatesudo apt install mysql-server</code></pre><p>安装过程中会让我们输入密码，输入之后其他默认即可。</p><pre><code>service mysql startservice mysql stop</code></pre><p>确认下是否启动成功</p><pre><code>sudo netstat -tap | grep mysql</code></pre></li><li><p>mysql 7.5的安装</p><p>如果我们之前安装过的话，要先卸载一下</p><pre><code>sudo apt remove mysql-serversudo apt autoremove</code></pre><p>同样，使用<code>apt</code>安装</p><pre><code>sudo apt install mysql-server</code></pre><p>安装的是mysql5.7版本的，中间不提示输入密码，完成后我们检查一下状态</p><pre><code>sudo service mysql status</code></pre><p>如果显示如下图所示表示安装成功并已经启动</p> <img src="http://p9h7y3nmi.bkt.clouddn.com/images//ubuntupic.png"><p>按q键可以推出退出显示</p><p>接着，我们打开<code>/etc/mysql/debian.cnf</code>文件，在这个文件中有系统默认分配给我们的用户名和密码，我们用<code>debian-sys-maint</code>这个用户名和密码登录进去就可修改密码了</p><p>我们还可以用<code>mysql_secure_installation</code>命令来配置服务器</p><pre><code>sudo mysql_secure_installation</code></pre><p>在步骤中会提示创建密码，验证插件等一系列配置。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Ubuntu-18-04下安装Mysql&quot;&gt;&lt;a href=&quot;#Ubuntu-18-04下安装Mysql&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu 18.04下安装Mysql&quot;&gt;&lt;/a&gt;Ubuntu 18.04下安装Mysql&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Mysql8.0的安装&lt;/p&gt;
    
    </summary>
    
      <category term="记录备忘" scheme="http://blog.kzimo.com/categories/%E8%AE%B0%E5%BD%95%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="Linux" scheme="http://blog.kzimo.com/tags/Linux/"/>
    
      <category term="Mysql" scheme="http://blog.kzimo.com/tags/Mysql/"/>
    
      <category term="Ubuntu" scheme="http://blog.kzimo.com/tags/Ubuntu/"/>
    
      <category term="Centos" scheme="http://blog.kzimo.com/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Git与Github</title>
    <link href="http://blog.kzimo.com/2018/05/28/cjinxz20i0002ksv2z49m16o4/"/>
    <id>http://blog.kzimo.com/2018/05/28/cjinxz20i0002ksv2z49m16o4/</id>
    <published>2018-05-28T06:50:00.000Z</published>
    <updated>2018-06-21T01:19:37.755Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h4><p>  Git是目前世界上最先进的分布式版本控制系统<br>    <a id="more"></a></p><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>  Linux：<code>sudo apt-get install git</code></p><p>  安装成功后，可以直接运行命令：<code>git</code>可以看到提示信息</p><p>  之后，需要进行设置，在命令行中输入：</p><pre><code>$ git config --global user.name &quot;Your name&quot;$ git config --global user.email &quot;email@example.com&quot;</code></pre><p>   其中，<code>--global</code>参数代表全局，表示这台机器上所有的Git仓库都会使用这个配置</p><h4 id="创建本地版本库"><a href="#创建本地版本库" class="headerlink" title="创建本地版本库"></a>创建本地版本库</h4><p>  版本库就是一个本地目录，我们可以使用git对这个目录里所有的文件进行管理<br>  首先，我们找个合适的地方，创建目录</p><pre><code>$ mkdir learngit$ cd learngit</code></pre><p>  然后，我们就可以在这个目录下创建本地仓库了</p><pre><code>$ git init</code></pre><p>   利用’<code>ls -ah</code>命令，我们可以看到当前目录下多出一个”.git”的隐藏目录，这个目录就是git管理版本库的</p><h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h4><p>  本地仓库分为三部分：工作区，暂存区，仓库区，其中暂存区、仓库区是版本库部分</p><p>  我们创建了文件或者项目之后，使用命令将文件添加到仓库中</p><pre><code>$ git add &quot;filename&quot;$ git add &quot;dirname&quot;$ git add .  </code></pre><p>   执行命令，没有提示，就代表我们成功将文件提交到了暂存区中</p><p>   我们可以查看暂存区的状态</p><pre><code>$ git status</code></pre><p>   然后，我们就可以将文件提交到仓库里了</p><pre><code>$ git commit -m &quot;write something about this file&quot;</code></pre><p>   <code>-m</code> 参数后边输入的是本次提交到说明，可以输入任意内容</p><h4 id="状态查看"><a href="#状态查看" class="headerlink" title="状态查看"></a>状态查看</h4><pre><code>$ git status</code></pre><p>   git status 命令可以让我们时刻掌握仓库当前的状态</p><pre><code>$ git diff</code></pre><p>   git diff 命令可以查看我们上次修改的具体内容</p><pre><code>  $ git log$ git log --pretty=online$ git reflog</code></pre><p>   git log 命令可以让我们查看我们提交的历史日志，如果嫌输出的内容太多，可以在后边加上”–pretty=online”参数看简化的日志，git relog可以让我们查看历史命令</p><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><p>   我们如果准备把文件回退到以前的版本，就可以使用一下命令</p><pre><code>   $ git reset --hard HEAD^$ git reset --hard 版本号</code></pre><p>   这样，我们就回退到了上个版本，在Git中，用HEAD代表当前版本，而上个版本就是HEAD^，上上个版本就是HEAD^^,如果要上上上100个版本的话，就可以写成HEAD~100.当然，我们还可可以直接使用版本号来回退，对于版本号，我们只需要写前六位就可以了。如果我们版本号不记得了，就可以使用”git relog”命令查看过去的历史命令就能看到我们以前的版本好了。</p><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>  通常，我们在电脑上会使用”rm”命令删除文件</p><pre><code>$ rm -rf filename</code></pre><p>   这个时候，Git知道我们删除了文件，因此，工作区和版本库不同了，我们用”git status”命令查看，git就会给我们提示，让我们选择，如果我们确定要删除的话，就可以输入”git rm”命令删除版本库中的文件，如果我们不想删除，就可以使用”git checkout”命令来把文件恢复</p><pre><code>   $ git rm filename$ git commit -m &quot;...&quot;</code></pre><h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><pre><code>$ git checkout -- filename</code></pre><p>   “git checkout”命令可以撤销我们之前的操作，如果我们还没有”git add”到暂存区的话，”git checkout”可以直接丢弃工作区的修改，如果我们已经把文件添加到了暂存区中，想丢弃修改的话，我们修需要先把暂存区的修改先撤销掉再checkout一下</p><pre><code>   $ git reset HEAD filename$ git checkout --filename</code></pre><p>  记住，如果我们要做撤销操作的话，一定要加上”– 文件名”，否则就变成切换分支了</p><h4 id="创建合并分支"><a href="#创建合并分支" class="headerlink" title="创建合并分支"></a>创建合并分支</h4><p>  我们可以使用”git branch”命令来创建分支,然后用”git checkout”命令切换分支</p><pre><code>$ git branch dev$ git checkout dev</code></pre><p> 这样，我们就创建了一个叫做”dev”的分支，上边这条命令还可以简写成</p><pre><code>$ git checkout -b dev</code></pre><p>   “-b”参数就表示我们要创建并切换分支</p><p>   用”git branch”命令不带参数，就可以列出所有分支，当前我们所处的分支前边会标上一个”*”号</p><pre><code>$ git branch$ git checkout master</code></pre><p>   我们在分支上修改了文件，要把分支合并到master主分支上，就用一下命令</p><pre><code>$ git merge dev</code></pre><p>   “git merge”命令用于把分支合并到当前分支上,合并完成后，我们就可以删除掉dev分支了</p><pre><code>$ git branch -d dev</code></pre><p>  如果，我们在两个分支上都对同一个文件做了修改，git就无法自动合并分区，我们就必须首先解决冲突，之后再提交，合并分区,用”git log –graph”可以看到分支合并图</p><h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h4><p>  由于GitHub和Git之间是通过SSH加密进行的，所以，我们需要把SSH Key添加到GitHub上</p><pre><code>$ ssh-keygen -t rsa -C &quot;email@example.com&quot;</code></pre><p>  这样，我们的用户主目录里就会出现一个”.ssh”的隐藏目录，目录里边有”id_rsa”和”id_rsa.pub”两个文件，其中”id_rsa.pub”是公钥，我们把里边的内容添加到GitHub里”Account settings”-“SSH Keys”-“Add SSH Key”里</p><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><p>  我们在github里创建一个新的repository，起名叫做”aaa”,我们就创建了一个叫做”aaa”的远程仓库，下面，我们就要把远程仓库和本地仓库进行同步，我们本地也要有个”aaa”的仓库，我们在本地仓库执行名令</p><pre><code>$ git remote add origin git@github.com:kidellwq/aaa.git</code></pre><p>   添加后，远程仓库名字就是<code>origin</code>，当然也可以叫别的，只是”origin”这个名字是git的默认叫法，我们一看知道这个个远程仓库，下一步，我们就把本地库底内容推送到远程仓库上</p><pre><code>$ git push -u origin master</code></pre><p>   由于远程仓库是空的，第一次推送，我们需要加上”-u”参数，把本地的master分支和远程的master分支关联起来，以后再推送的时候，就不需要了</p><p>   而我们要把远程仓库的内容获取到本地，一个是clone，一个是pull</p><pre><code>$ git pull$ git clone </code></pre><p>   两者的区别在于clone是将远程仓库的版本库完全复制一份到本地，而pull是相当于将远程仓库的版本分支合并到本地仓库，两者有着本质区别</p><h4 id="自己搭建Git服务器"><a href="#自己搭建Git服务器" class="headerlink" title="自己搭建Git服务器"></a>自己搭建Git服务器</h4><ol><li><p>安装git</p><pre><code>$ sudo apt-get install git</code></pre></li><li><p>创建git用户</p><pre><code>$ sudo adduser git</code></pre></li><li><p>创建证书登录</p><p>把需要登录的用户的”id_rsa.pub”公钥，导入到<code>/home/git/.ssh/authorized_keys</code>文件中</p></li><li><p>初始化Git仓库</p><p>先选定一个目录当作仓库，比如<code>/srv/sample.git</code>,在<code>/srv</code>目录下执行命令</p><pre><code>$ sudo git init --bare sample.git</code></pre><p>  然后，把用户owner改为git用户</p><pre><code>$ sudo chown -R git:git sample.git</code></pre></li><li><p>禁用shell登录</p><p> 修改<code>/etc/passwd</code>文件，把最下边的git用户改为：</p><pre><code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</code></pre></li><li><p>克隆远程仓库</p><pre><code>$ git clone git@server:/srv/sample.git</code></pre><p>之后就可以推送文件了</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Git简介&quot;&gt;&lt;a href=&quot;#Git简介&quot; class=&quot;headerlink&quot; title=&quot;Git简介&quot;&gt;&lt;/a&gt;Git简介&lt;/h4&gt;&lt;p&gt;  Git是目前世界上最先进的分布式版本控制系统&lt;br&gt;
    
    </summary>
    
      <category term="记录备忘" scheme="http://blog.kzimo.com/categories/%E8%AE%B0%E5%BD%95%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="资料查阅" scheme="http://blog.kzimo.com/tags/%E8%B5%84%E6%96%99%E6%9F%A5%E9%98%85/"/>
    
      <category term="git" scheme="http://blog.kzimo.com/tags/git/"/>
    
      <category term="github" scheme="http://blog.kzimo.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Markdown指南</title>
    <link href="http://blog.kzimo.com/2016/05/28/cjinxz20o0007ksv2ro6bqfjz/"/>
    <id>http://blog.kzimo.com/2016/05/28/cjinxz20o0007ksv2ro6bqfjz/</id>
    <published>2016-05-28T01:03:00.000Z</published>
    <updated>2018-06-21T01:19:53.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Markdown 的目标是实现「易读易写」。Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。<br>  <a id="more"></a></p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。</p><p>类 Setext 形式:</p><p>是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：</p><pre><code>This is an H1=============This is an H2-------------</code></pre><p>任何数量的 = 和 - 都可以有效果。</p><p>类 Atx 形式:</p><p>是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p><pre><code># H1## H2### H3#### H4##### H5###### H6</code></pre><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，&gt;你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ,或者你也可以偷懒只在整个段落的第一行最前面加上 &gt; ：</p><pre><code>&gt;This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</code></pre><p>效果：</p><blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号、加号或是减号作为列表标记：</p><pre><code>*   Red     ||     +   Ren       ||       -    Red*   Green   ||     +   Green     ||       -    Green*   Blue    ||     +   Blue      ||       -    Blue</code></pre><p>效果：</p><ul><li>Red</li><li>Green</li><li>Blue</li></ul><p>有序列表则使用数字接着一个英文句点：</p><pre><code>1.  Bird2.  McHale3.  Parish</code></pre><p>比如，写成这样，完全不影响其输出：  </p><pre><code>2. hello4. jph5. lkj3. 46451. dsa</code></pre><p>输出结果为：</p><ol start="2"><li>hello</li><li>jph</li><li>lkj</li><li>4645</li><li>dsa</li></ol><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 &lt; pre &gt; 和 &lt; code &gt; 标签来把代码区块包起来。如果要标记一小段行内代码，你可以用反引号把它包起来。</p><p>我要打印出<code>print(&#39;helo world&#39;)</code></p><pre><code>我要打印出`print(&apos;helo world&apos;)`</code></pre><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><p>可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。</p><pre><code>* * *********- - ----------------------------------------</code></pre><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p><p>行内式:</p><p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p><p>[<a href="http://www.baidu.com]" target="_blank" rel="noopener">http://www.baidu.com]</a>  或者 <a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a></p><pre><code>[http://www.baidu.com]  或者 [百度](http://www.baidu.com)</code></pre><p>参考式:</p><pre><code>This is [an example] [id] reference-style link.接着，在文件的任意处，你可以把这个标记的链接内容定义出来：[id]: http://example.com/  &quot;Optional Title Here&quot; </code></pre><p>This is <a href="http://www.baidu.com/" target="_blank" rel="noopener">百度</a> reference-style link.</p><p>Markdown 还支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><pre><code>&lt;http://www.baidu.com&gt;&lt;address@example.com&gt;</code></pre><p><a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></p><p><a href="mailto:&#x61;&#100;&#100;&#114;&#x65;&#115;&#x73;&#64;&#101;&#x78;&#97;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#109;" target="_blank" rel="noopener">&#x61;&#100;&#100;&#114;&#x65;&#115;&#x73;&#64;&#101;&#x78;&#97;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#109;</a></p><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>Markdown 使用星号( * )或者下划线( _ )作为被标记的内容，被标记的内容在html中会被转为&lt; em &gt;，如果用两个 ** 或者 __ 包裹，会转为&lt; strong &gt;标签</p><p><em>This is em tag</em></p><pre><code>*This is em tag*</code></pre><p><strong>This is strong tag</strong></p><pre><code>**This is strong tag**</code></pre><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>图片引用和链接类似，如下：</p><pre><code>![Alt text](/path/to/img.jpg)![pic](http://old.bz55.com/uploads/allimg/150210/139-150210134411-50.jpg)</code></pre><p><img src="http://old.bz55.com/uploads/allimg/150210/139-150210134411-50.jpg" alt="pic"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Markdown 的目标是实现「易读易写」。Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。&lt;br&gt;
    
    </summary>
    
      <category term="记录备忘" scheme="http://blog.kzimo.com/categories/%E8%AE%B0%E5%BD%95%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="资料查阅" scheme="http://blog.kzimo.com/tags/%E8%B5%84%E6%96%99%E6%9F%A5%E9%98%85/"/>
    
      <category term="md" scheme="http://blog.kzimo.com/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>这是我的第一篇博客</title>
    <link href="http://blog.kzimo.com/2016/05/23/cjinxz20p0008ksv2dys4aodn/"/>
    <id>http://blog.kzimo.com/2016/05/23/cjinxz20p0008ksv2dys4aodn/</id>
    <published>2016-05-23T03:11:00.000Z</published>
    <updated>2018-05-28T01:00:33.153Z</updated>
    
    <content type="html"><![CDATA[<p>占位，以后再写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;占位，以后再写&lt;/p&gt;

      
    
    </summary>
    
      <category term="随笔" scheme="http://blog.kzimo.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="blog" scheme="http://blog.kzimo.com/tags/blog/"/>
    
  </entry>
  
</feed>
